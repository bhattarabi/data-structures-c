template<class elemType>
void binaryTreeType<elemType>::generation(const elemType& item) const
{
	queue<nodeType<elemType>*> q1, q2;
	q1.push(binaryTreeType<elemType>::root);
	
	bool found = false;
	
	while (!found && !q1.empty())
	{		
		while (!q1.empty())
		{
			if ((q1.front()->llink != NULL && q1.front()->llink->info== item) ||
				(q1.front()->rlink != NULL && q1.front()->rlink->info== item))
				found = true;
			
			if (q1.front()->llink!=NULL)
				q2.push(q1.front()->llink);
			if (q1.front()->rlink!=NULL)
				q2.push(q1.front()->rlink);
			q1.pop();
		}
		q1 = q2;
		
		q2 = queue<nodeType<elemType>*>();
	}	
		
	while (!q1.empty())
	{
		cout << q1.front()->info << ' ';
		q1.pop();
	}
	cout << endl;
}
